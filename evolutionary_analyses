-> Árvore de soja

A árvore dos genes de soja com o gene de Vmungo (VMungo1215G1788) como outgroup foi inferida com o IQTREE2.

Foi criada a variável tree_outgroup, lendo a árvore com a função tree_outgroup.
Depois foi criada outra variável aenas para obter a árvore bruta para obter os nomes dos nós para agrupamento. Depois a árvore foi visualizada com o ggtree, um pacote
que tem a função de visualizar árvores filogenéticas e dados associados heterogêneos com base na gramática de gráficos ggtree
fornece funções para visualizar a árvore filogenética e seus dados associados em R.
Depois foi criado um vetor de ordem de genes para reequilibrar fatores em gráficos adicionais, com a funão rev, que fornece uma versão invertida do argumento.
Dentro da função rev foi atribuida a função get_taxa_name, que extrai um vetor ordenado das pontas do clado selecionado ou da árvore inteira com base no gráfico ggtree().

-> Estrutura dos genes

Primeiramente foi feito o download do arquivo gff das funcionalidades dos éxons, importado para o R com a função import e atribuído à variável gff. Depois 
foi importada a seuqência PR-5 e atribuida à variável seqs_PR5.
Depois foram selecionados os genes que fazem parte do conjunto de genes em seqs_PR5 e são do tipo "gene", do arquivo gff (de funcionalidades de exons, apenas)
Depois foi atribuído à variável gene.str.genes$start o valor 1 e o comprimento de gene_str_genes à variável gene.str.genes$end.
Depois foi atribuido valores vazios para o outgroup, atribuindo o valor 1 para vmungo$start e vmungo$end e o nome em V.mungo$Name <- "Vmungo".


Depois foram selecionados os exons, através da seleção do tipo de gff = "exon" e que possuem os gff$genes_id dentro de seqs_PR5. Em seguida foram substituidos os
IDs dos genes apenas pelo número dos éxons na variável ID com a função gsub(). A função gsub() substituiu a aplavra exon e tudo que vinha antes dela, primeiramente por 
nada, depois pelo oq restou do conteúdo da variável ID.
Depois os exons foram divididos em grupos de acordo com o nome do gene, através da função split() divide um vetor ou quadro de dados em grupos de 
acordo com os parâmetros da função.
Depois 

Depois foram unidos os dois data.tables: gene.str.exons e ids, pelas variáveis Name e Gene_ID, usando a função left_join, que junta dois data.tables.
Em seguida, foi atribuido à variável Name as observações de name, com isso as colunas de name e Gene_name x e y formaram uma só coluna.
Em seguida, as variáveis gene.str.genes e v.mungo, foram unidas por linhas, com a função rbind.gene_str_plotdata$Name
Depois a variável gene_str_plotdata$Name, que contém os Gene_ids de ids, foi atribuída ao objeto ids$name (em ids$Gene_ID, que está presente em gene_str_plotdata$Name.
Depois, a variável gene_str_plotdata$Name foi atribuída a função fct_relevel, que reorganiza os níveis de um fator. Dessa forma, foi fornecido um fator à ser ordenado, o 
gene_str_plotdata$Name, e o nível de referência de ordenação, o gene_order_tree.
Depois foi atribuído à variável a função ggplot, que fez a plotagem da variável gene_str_plotdata, usando a estética de xmax = star e xmin = end, para plotar o inicio e o fim do gene. 
Dentro ainda dessa plotagem foi utilizada a função  geom_gene_arrow para definir o tamanho da seta (largura - width e altura - height) e a função geom_subgene_arrow, 
com a variável gene.str.exons como data, com a estética xsubmax = star e xsubmin= end, para definir o início e fim de cada éxon e os tamanhos das setas foram definidos
com os argumentos  arrowhead_height e arrowhead_width. Depois foram definidas as cores com a função scale_fill_manual, dentro da função ggplot. Depois foi utilizada a função 
scale_x_continuous, para definir a escala de x contínuo (expand = Constantes que garantem que os dados sejam colocados a alguma distância dos eixos.)
Por fim, foi utilizada a função theme_tree2, que é utilizada para dar um tema ao gráfico. Nessa caso, foi utilizado o argumento legend.position="none", para
atribuir nenhuma posição de legenda.


-> Descoberta de motifs de novo("from the beginning")
Primeiramente foi utilizada a função options(), com o argumento de direção de onde está localizado o meme, que é um algoritimo implementado ao pacote universalmotif.
Depois foi carregado o arquivo R de funções que foram criadas manualmente, o arquivo functions.R e criado o diretório MEME_motif. Depois foi atribuído à variável
meme, a função run_meme, com o argumento target.sequences = seqs_pr5, o número de motifs desejados = 20 (obtido em literaturas anteriores), com a largura mínima = 6 e máxima = 50. Além disso, 
dentro dessa função foi fornecido o diretório do output da função. Depois com o argumento overwrite = TRUE, foi feita a substituição do diretório.
Depois foram criados intervalor para fazer a plotagem , atribuindo à variável a função data.frame, que cria data frames, com o argumento start = v.mungo$start,
end=v.mungo$end, gene_id=v.mungo$Name e Motif_name='ABC'. Depois foi atribuída à variável motif.ranges (range = intervalo), a função meme2ranges, que está dentro
das funções do arquivo functions.R.
A função meme2ranges: 
@acessando slots na classe S4 (o slot é um componente nomeado do objeto que é acessado usando o operador de subconjunto especializado @(pronunciado em))
S4 fornece uma abordagem formal para OOP funcional (A programação orientada a objetos (OOP) é um modelo de programação de computador que organiza 
o design de software em torno de dados ou objetos, em vez de funções e lógica).
A função meme2ranges foi criada atribuindo à variável meme2ranges uma função: function(meme_output), onde meme_output é o output da variável meme, onde 
mlist<-lapply(1:length(meme_output$sites), function (x) {
return(as.data.frame(meme_output$sites[[x]]@ranges))
  })
(ou seja, foi criada uma lista com a função lapply, onde para cada elemento de 1 ao comprimento de sites em meme_output, foi aplicada a função para x:
return (que retorna o último output para uma função automaticamente) (as.data.frame (retorna um data frame) (meme_output$sites[[x]]@ranges)) (retorna 
os slots de intervalo da classe S4 de um data frame de x em sites de meme_output)
Depois, os elemtentos da lista (mlist) foram renomeados com os nomes de meme_output$sites, com a função names() (a variável names(mlist) representa os nomes 
a serrem renomeados e o objeto atribuído à ela (names(meme_output$sites)), representa os nomes que serão usados para essa renomeação).

Depois, os objetos de motif.ranges foram renomeados para c("start", "end", "gene_id", "Motif_name"), utilizando a função names() novamente.
Em seguida, foi atribuída à variável motif_structure_plotdata os seguintes elementos: foi utilizada a variável motif.ranges, que foi unida com a variável ids, pela função left_join,
onde "gene_id" = "Gene_ID". Em seguida, foi criada uma nova variável chamada gene_id contendo a variável name. Em seguida foram selecionadas apenas
as variáveis pela função select. Por fim, foi utilizada a função rbind para unir todo conteúdo anterior com a variável motif.ranges.v.mungo.
Depois, foi atribuida à variável motif_structure_plotdata$gene_id, a função forcats::fct_relevel, para renivelar o conteúdo de motif_structure_plotdata$gene_id
à partir do nivelamento de gene_order_tree.
Depois esses dados foram plotados com a funçã ggplot dentro da variável motif_structure, utilizando a variável motif_structure_plotdata como data e a estética 
de xmax = end e xmin = start (os menores e maiores valores do eixo x) e y = gene_id dos motifs encontrados. Foi utilizada ainda a função geom_gene_arrow, para definir a altura(height) e a largura (width)
das setas, com a função unit() para definir os valores e as unidades. Depois foi utilizada a função geom_subgene_arrow, com a variável motif_structure_plotdata como data
e em estética, os valores de início e fim dos motifs como xsubmax=end, xsubmin=start e fill=Motif_name. Em seguida, foi atribuído ao argumento show.legend o vetor FALSE.
Em seguida, foi atribuído ao argumento arrowhead_height, dentro da função unit(), os valores e unidades de altura, e no argumento arrowhead_widgth, dentro da função unit,
os valores de largura e unidade. Em seguida, foram definindas as 21 cores dos motifs, com a função scale_fill_manual, seguidos dos valores de 0 e 0, argumento da função scale_x_continuous. Com essa função 
é possível definir a escala de x contínuo (expand = Constantes que garantem que os dados sejam colocados a alguma distância dos eixos.)
Por fim, foi utilizada a função theme_tree2() para definir o tema. 


-> Árvore de soja

A árvore dos genes de soja com o gene de Vmungo (VMungo1215G1788) como outgroup foi inferida com o IQTREE2.

Foi criada a variável tree_outgroup, lendo a árvore com a função tree_outgroup.
Depois foi criada outra variável aenas para obter a árvore bruta para obter os nomes dos nós para agrupamento. Depois a árvore foi visualizada com o ggtree, um pacote
que tem a função de visualizar árvores filogenéticas e dados associados heterogêneos com base na gramática de gráficos ggtree
fornece funções para visualizar a árvore filogenética e seus dados associados em R.
Depois foi criado um vetor de ordem de genes para reequilibrar fatores em gráficos adicionais, com a funão rev, que fornece uma versão invertida do argumento.
Dentro da função rev foi atribuida a função get_taxa_name, que extrai um vetor ordenado das pontas do clado selecionado ou da árvore inteira com base no gráfico ggtree().

-> Estrutura dos genes

Primeiramente foi feito o download do arquivo gff das funcionalidades dos éxons, importado para o R com a função import e atribuído à variável gff. Depois 
foi importada a seuqência PR-5 e atribuida à variável seqs_PR5.
Depois foram selecionados os genes que fazem parte do conjunto de genes em seqs_PR5 e são do tipo "gene", do arquivo gff (de funcionalidades de exons, apenas)
Depois foi atribuído à variável gene.str.genes$start o valor 1 e o comprimento de gene_str_genes à variável gene.str.genes$end.
Depois foi atribuido valores vazios para o outgroup, atribuindo o valor 1 para vmungo$start e vmungo$end e o nome em V.mungo$Name <- "Vmungo".


Depois foram selecionados os exons, através da seleção do tipo de gff = "exon" e que possuem os gff$genes_id dentro de seqs_PR5. Em seguida foram substituidos os
IDs dos genes apenas pelo número dos éxons na variável ID com a função gsub(). A função gsub() substituiu a aplavra exon e tudo que vinha antes dela, primeiramente por 
nada, depois pelo oq restou do conteúdo da variável ID.
Depois os exons foram divididos em grupos de acordo com o nome do gene, através da função split() divide um vetor ou quadro de dados em grupos de 
acordo com os parâmetros da função.
Depois 

Depois foram unidos os dois data.tables: gene.str.exons e ids, pelas variáveis Name e Gene_ID, usando a função left_join, que junta dois data.tables.
Em seguida, foi atribuido à variável Name as observações de name, com isso as colunas de name e Gene_name x e y formaram uma só coluna.
Em seguida, as variáveis gene.str.genes e v.mungo, foram unidas por linhas, com a função rbind.gene_str_plotdata$Name
Depois a variável gene_str_plotdata$Name, que contém os Gene_ids de ids, foi atribuída ao objeto ids$name (em ids$Gene_ID, que está presente em gene_str_plotdata$Name.
Depois, a variável gene_str_plotdata$Name foi atribuída a função fct_relevel, que reorganiza os níveis de um fator. Dessa forma, foi fornecido um fator à ser ordenado, o 
gene_str_plotdata$Name, e o nível de referência de ordenação, o gene_order_tree.
Depois foi atribuído à variável a função ggplot, que fez a plotagem da variável gene_str_plotdata, usando a estética de xmax = star e xmin = end, para plotar o inicio e o fim do gene. 
Dentro ainda dessa plotagem foi utilizada a função  geom_gene_arrow para definir o tamanho da seta (largura - width e altura - height) e a função geom_subgene_arrow, 
com a variável gene.str.exons como data, com a estética xsubmax = star e xsubmin= end, para definir o início e fim de cada éxon e os tamanhos das setas foram definidos
com os argumentos  arrowhead_height e arrowhead_width. Depois foram definidas as cores com a função scale_fill_manual, dentro da função ggplot. Depois foi utilizada a função 
scale_x_continuous, para definir a escala de x contínuo (expand = Constantes que garantem que os dados sejam colocados a alguma distância dos eixos.)
Por fim, foi utilizada a função theme_tree2, que é utilizada para dar um tema ao gráfico. Nessa caso, foi utilizado o argumento legend.position="none", para
atribuir nenhuma posição de legenda.


-> Descoberta de motifs de novo("from the beginning")
Primeiramente foi utilizada a função options(), com o argumento de direção de onde está localizado o meme, que é um algoritimo implementado ao pacote universalmotif.
Depois foi carregado o arquivo R de funções que foram criadas manualmente, o arquivo functions.R e criado o diretório MEME_motif. Depois foi atribuído à variável
meme, a função run_meme, com o argumento target.sequences = seqs_pr5, o número de motifs desejados = 20 (obtido em literaturas anteriores), com a largura mínima = 6 e máxima = 50. Além disso, 
dentro dessa função foi fornecido o diretório do output da função. Depois com o argumento overwrite = TRUE, foi feita a substituição do diretório.
Depois foram criados intervalor para fazer a plotagem , atribuindo à variável a função data.frame, que cria data frames, com o argumento start = v.mungo$start,
end=v.mungo$end, gene_id=v.mungo$Name e Motif_name='ABC'. Depois foi atribuída à variável motif.ranges (range = intervalo), a função meme2ranges, que está dentro
das funções do arquivo functions.R.
A função meme2ranges: 
@acessando slots na classe S4 (o slot é um componente nomeado do objeto que é acessado usando o operador de subconjunto especializado @(pronunciado em))
S4 fornece uma abordagem formal para OOP funcional (A programação orientada a objetos (OOP) é um modelo de programação de computador que organiza 
o design de software em torno de dados ou objetos, em vez de funções e lógica).
A função meme2ranges foi criada atribuindo à variável meme2ranges uma função: function(meme_output), onde meme_output é o output da variável meme, onde 
mlist<-lapply(1:length(meme_output$sites), function (x) {
return(as.data.frame(meme_output$sites[[x]]@ranges))
  })
(ou seja, foi criada uma lista com a função lapply, onde para cada elemento de 1 ao comprimento de sites em meme_output, foi aplicada a função para x:
return (que retorna o último output para uma função automaticamente) (as.data.frame (retorna um data frame) (meme_output$sites[[x]]@ranges)) (retorna 
os slots de intervalo da classe S4 de um data frame de x em sites de meme_output)
Depois, os elemtentos da lista (mlist) foram renomeados com os nomes de meme_output$sites, com a função names() (a variável names(mlist) representa os nomes 
a serrem renomeados e o objeto atribuído à ela (names(meme_output$sites)), representa os nomes que serão usados para essa renomeação).

Depois, os objetos de motif.ranges foram renomeados para c("start", "end", "gene_id", "Motif_name"), utilizando a função names() novamente.
Em seguida, foi atribuída à variável motif_structure_plotdata os seguintes elementos: foi utilizada a variável motif.ranges, que foi unida com a variável ids, pela função left_join,
onde "gene_id" = "Gene_ID". Em seguida, foi criada uma nova variável chamada gene_id contendo a variável name. Em seguida foram selecionadas apenas
as variáveis pela função select. Por fim, foi utilizada a função rbind para unir todo conteúdo anterior com a variável motif.ranges.v.mungo.
Depois, foi atribuida à variável motif_structure_plotdata$gene_id, a função forcats::fct_relevel, para renivelar o conteúdo de motif_structure_plotdata$gene_id
à partir do nivelamento de gene_order_tree.
Depois esses dados foram plotados com a funçã ggplot dentro da variável motif_structure, utilizando a variável motif_structure_plotdata como data e a estética 
de xmax = end e xmin = start (os menores e maiores valores do eixo x) e y = gene_id dos motifs encontrados. Foi utilizada ainda a função geom_gene_arrow, para definir a altura(height) e a largura (width)
das setas, com a função unit() para definir os valores e as unidades. Depois foi utilizada a função geom_subgene_arrow, com a variável motif_structure_plotdata como data
e em estética, os valores de início e fim dos motifs como xsubmax=end, xsubmin=start e fill=Motif_name. Em seguida, foi atribuído ao argumento show.legend o vetor FALSE.
Em seguida, foi atribuído ao argumento arrowhead_height, dentro da função unit(), os valores e unidades de altura, e no argumento arrowhead_widgth, dentro da função unit,
os valores de largura e unidade. Em seguida, foram definindas as 21 cores dos motifs, com a função scale_fill_manual, seguidos dos valores de 0 e 0, argumento da função scale_x_continuous. Com essa função 
é possível definir a escala de x contínuo (expand = Constantes que garantem que os dados sejam colocados a alguma distância dos eixos.)
Por fim, foi utilizada a função theme_tree2() para definir o tema. 

## Identification of cis-regulatory elements
A maioria dos métodos de bioinformática baseados em matriz de peso de posição (PWM) desenvolvidos para prever sítios de ligação de fator de 
transcrição (TFBS) assumem que cada nucleotídeo no motivo da sequência contribui independentemente para a interação entre a proteína e a 
sequência de DNA.

-> Identificação de elementos cis-reguladores

Primeiramento foi deifinido o tempo máximo para esperar uma resposta até desistir, com a função timeout=200, dentro da função options, que defini opções globais
que afetam como o R calculo e exibe seus resultados.
Depois foi atribuído à variável genome, a função readDNAStringSet do pacotre BioStrings para ler a sequeência de DNA do genoma de soja à partir do download 
desse genoma no PLAZA 5.0.
Depois foi atribuído à função pr5.granges a variável gff, que contém os nomes dos genes TLPs dentro do gene_id da variável gff, além do type de gff ser == "gene".

# Load motifs
Depois foram carregados os motifs com a função read.meme para ler o arquivo PWM_Glycine_max.meme.txt, Protein binding site weight matrix (Matriz de
peso do sítio de ligação à proteína). O carregamento desse arquivo foi atribuído à variável motifs.

# Load ID mapping
Depois foram carregados os mapeamentos dos IDs, com a função read.csv e atribuído esse carregamento à variável mapping. Depois foi atribuído à variável mapping, o filtro
para remover os dados com NAs e em seguida foi atribuído à variável mapping$TF_Locus a função gsub para substituir os pontos seguidos de números depois do nomes dos genes 
(\\.[0-9]$) por nada, da variável mapping$TF_Locus.

# Load TF mapping
Em seguida, foi carregado a lista de fatores de transcrição de Glycine max, com a função read_tsv do pacote readr e atribuído à função tf.fam.
Em seguida, foi atribuído à variável tf.fam, a função as.data.frame para converter as colunas da variável tf.fam em um data.frame.
Depois, foi atribuído à variável tf.fam$TF_ID a função gsub, para substituir o ponto e os números seguidos dos nomes dos genes (\\.[0-9]\\.p$), por nada, da variável
tf.fam$TF_ID. 
Depois, os valores de upstream, que é o DNA genômico que precede o local de início da transcrição, na região 5' da fita de DNA e downstream, que é o DNA
genômico localizado após o fim da região de transcrição, foram definidos em 100 e 200, respectivamente, como em Arabidopsis thaliana. Além disso, o valor de 
threshold, que é o valor limite do tipo logodds, que foi definida em sequência pela variável threshold.type. Depois foi definida a variável ranges (intervalos)
com o objeto pr5.granges. Em seguida, foi definida a variável motif.mapping com o objeto mapping.

# Get promoter sequences (from -1000 bp to + 200 bp relative to the TSS)

Depois foram pegas as sequências de promotores (de -1000 bp para + 200 relativo ao TSS - transcription start site)
Isso foi feito da seguinte forma: foi atribuído à variável promoters a função promoters, do pacote GenomicRanges, que retorna um objeto do mesmo tipo e comprimento
que x contendo os intervalos do promotor. Além disso, os intervalos do promotor se estendem ao redor do local de início da transcrição (TSS), que é definido como start(x).
Dessa forma, dentro dessa função foi utilizada a variável ranges, que é um objeto GenomicRanges e os valores de upstream e downstream, definidos anteriormente.
Em seguida, foi criada a variável promoters.seq, atrbuída a função getSeq, do pacote BioStrings, que extrai  um conjunto de sequências (ou subsequências)
de um contêiner de sequência como um objeto BSgenome (A classe BSgenome é um container para armazenar as sequências completas do genoma de um determinado 
organismo) ou outro. Dentro dessa função foram atribuídas as variáveis genome e promoters, como x (BSgenome or XStringSet) e names(Quando x é um BSgenome, os nomes devem
ser um vetor de caracteres contendo os nomes das sequências em x de onde obter as subsequências), respectivamente. Em seguida, a variável promoters.seq foi nomeada
com os nomes de gene_id da variável ranges. 
Por fim, foi criado um arquivo fasta chamado promoters.fasta com a função writeXStringSet, que escreve um objeto XStringSet em um arquivo. O objeto StringSet escrito 
foi o correspondente à variável promoters.seq.

# Scanning sequences for cis-regulatory elements

Aqui foram scaneadas sequências por elementos cis-regulatórios.
Aqui foi atribuída à variável a função scan_sequences, que é usada para escanear sequências de qualquer alfabeto usando as matrizes PWM de um conjunto de motifs de entrada.
Nessa função foi utilizada a variável motifs como motifs de entrada, promoters.seq como sequências(XStringSetSequências para escanear. O alfabeto deve corresponder ao motivo),
threshold com o valor de threshold indicado anteriormente, o threshold.type também indicado anteriormente (logodds - o  logit da probabilidade é o logaritmo das probabilidades)
e o calc.pvals = TRUE (Calcule os valores P para cada acerto. Esta é uma opção de conveniência que simplesmente fornece motif_pvalue()os motivos de
entrada e as pontuações de cada acerto. Tenha cuidado ao definir isso para TRUE se você antecipar milhares de ocorrências: espere alguns segundos ou 
minutos para que os cálculos sejam concluídos. Aumentar o nthreadsvalor pode ajudar muito aqui. Consulte Detalhes para obter mais informações sobre 
o cálculo do valor P.)
Depois foi atribída a variável scan a função as.data.frame para a variável scan, para converte-la em um data.frame.
Em seguida, foi atribuída à variável scan, a variável scan com valor $pvalue < 0.05, nas linhas. Por fim, foi atribuída à variável scan.list, a função
split que divide os dados de entrada ( x) em diferentes grupos ( f). Os argumento utilizados froam as variáveis scan (x) e scan$sequence (f).

# Add CREs to PR-5 genes
ELEMENTOS CIS-REGULATÓRIOS =  são regiões de DNA não codificante que regulam a transcrição de genes vizinhos.

Adicionar Cis-regulatory elements para os genes PR-5. Para isso, foi criada a variável scan.list.mapping, atribuída à função lapply, que pega uma lista, um vetor ou um 
data frame como imput e retona uma lista como output e aplica uma função à cada elemento da lista. Nesse caso, foi pega a variável scan.list, e aplicada 
a função para em y (variável), mesclar x e motif.mapping, por (by)= 1 (especificações das colunas usadas para mesclagem), em final (variável), mesclar 
y e tf.fam, por x (by.x)= "TF_Locus" e por y (by.y) = 1. Em seguida, a variável final foi atribuída, dentro da função, à variável final, diferente de duplicado
(!duplicated), as colunas 1, 2, 5, e 6 dessa mesma variável final e por fim retornar o final.

# Filter data to remove redundant matches
Filtrar data para remover matches redundantes.

Foi atribuído à variável scan.list2, a função lapply, que pegou a variável scan.list.mapping e aplicou a função, onde x é uma variável atribuída a x, onde 
as variáveis de x x$TF_Locus, x$sequence e x$start (rows) foram ordenadas pela função order. Ainda dentro dessa função foi atribuída a variável difs a função abs, que retorna o valor absoluto,
da função diff (usada para encontrar a diferença entre cada par consecutivo de elementos de um vetor) dos valores de x$start. Em seguida, foi atribuída a variável 
x$diff, os valores: 10 e difs. Em seguida, foi atribuída à variável ind a função with com x como dados, para calcular índices dos elementos que são redundantes, ou seja,
o mesmo motif aparecendo em matches difernetes, mas uma posição à frente ou atrás do match anterior. Em seguida, dentro dessa mesma função, foi atribuída 
a variável x$isnew com a função ifelse, que tem como argumentos o valor teste, que é o índice definido anteriormente e sim e não, para o valor teste, como 
"Diff" e "Same", respectivamente. Em seguida, foi atribuída a variável x$isnew[1], o objeto "Diff". Por fim, foi atribuído à variável y, a variável x que possui
o valor de diff > que 1 e x$isnew != de "Same", nas linhas.

Em seguida, foi atribuída a variável unimotifout2freq, a função function(list.mapping) (função criada), onde foi atribuída à variável freq, a função lapply, com
list.mapping como argumento e a função function(x), seguida da função as.data.frame com a função table utilizando x$Family como argumento, para converter
essa table, com esse dado, em um data frame. Com isso será criada uma lista de data frames com a frequência de CREs. .
Em seguida, as colunas com o nome 'Freq' foram substituidas pelos nomes dos ids. 

Por fim, as listas foram reduzidas a um data frame com uma coluna por nomes dos genes.

Com  isso, a função criada foi utilizada com a variável scan.list2., que teve suas linhas renomeadas com os genes IDs da variável ids.

Por fim, foi criado o heatmap com a função pheatmap, tendo como primeiro arguemnto a função t(), que faz a transposição dos dados(mudar a loclaização de linhas e colunas),
seguido do argumento com a função display_numbers, que define se os numeros das celulas serao exibidos ou não.





